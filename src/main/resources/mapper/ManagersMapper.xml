<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.test.mapper.ManagersMapper">

    <resultMap id="BaseResultMap" type="com.example.test.domain.Managers">
            <id property="id" column="ID" jdbcType="INTEGER"/>
            <result property="picture" column="Picture" jdbcType="VARCHAR"/>
            <result property="account" column="Account" jdbcType="VARCHAR"/>
            <result property="password" column="Password" jdbcType="VARCHAR"/>
            <result property="nickname" column="Nickname" jdbcType="VARCHAR"/>
            <result property="sex" column="Sex" jdbcType="VARCHAR"/>
            <result property="phonenum" column="PhoneNum" jdbcType="VARCHAR"/>
            <result property="managerstatus" column="ManagerStatus" jdbcType="INTEGER"/>
            <result property="managerstatusz" column="ManagerStatusz" jdbcType="VARCHAR"/>
            <result property="level" column="Level" jdbcType="INTEGER"/>
            <result property="levelz" column="Levelz" jdbcType="VARCHAR"/>
            <result property="registertime" column="RegisterTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        ID,Picture,Account,
        Password,Nickname,Sex,
        PhoneNum,ManagerStatus,Level,
        RegisterTime
    </sql>

    <select id="selectAllManager" parameterType="Managers" resultMap="BaseResultMap">
        select m.*, d1.RelationValue Levelz, d2.RelationValue ManagerStatusz
        from  (managers m left join dictionary d1 on (d1.RelationName = 'level' and m.Level = d1.RelationID)) left join dictionary d2 on (d2.RelationName = 'ManagerStatus' and m.ManagerStatus = d2.RelationID)
        <where>
            <if test="manager.nickname != null and manager.nickname.trim().length()>0">
                <bind name="nicknamez" value="'%' + manager.nickname + '%'"/>
                and m.Nickname like #{nicknamez}
            </if>
            <if test="manager.account != null and manager.account.trim().length()>0">
                <bind name="accountz" value="'%' + manager.account + '%'"/>
                and m.Account like #{accountz}
            </if>
            <if test="manager.phonenum != null and manager.phonenum.trim().length()>0">
                <bind name="phonenumz" value="'%' + manager.phonenum + '%'"/>
                and m.PhoneNum like #{phonenumz}
            </if>
            <if test="manager.managerstatus != null">
                and m.ManagerStatus = #{manager.managerstatus}
            </if>
            <if test="manager.level != null">
                and m.Level = #{manager.level}
            </if>
            <if test="manager.startime!=null">
                and m.RegisterTime >= #{manager.startime}
            </if>
            <if test="manager.endtime!=null">
                and m.RegisterTime <![CDATA[<]]>= #{manager.endtime}
            </if>
        and m.ManagerStatus != 2
        </where>
        order by m.id
    </select>

    <select id="selectManager" parameterType="Managers" resultMap="BaseResultMap">
        select m.*, d1.RelationValue Levelz, d2.RelationValue ManagerStatusz
        from  (managers m left join dictionary d1 on (d1.RelationName = 'level' and m.Level = d1.RelationID)) left join dictionary d2 on (d2.RelationName = 'ManagerStatus' and m.ManagerStatus = d2.RelationID)
        where  m.Account = #{account} and m.Password = #{password}
    </select>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select m.*, d1.RelationValue Levelz, d2.RelationValue ManagerStatusz
        from (managers m left join dictionary d1 on (d1.RelationName = 'level' and m.Level = d1.RelationID)) left join dictionary d2 on (d2.RelationName = 'ManagerStatus' and m.ManagerStatus = d2.RelationID)
        where  m.ID = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from managers
        where  ID = #{id,jdbcType=INTEGER} 
    </delete>

    <insert id="insert" keyColumn="ID" keyProperty="id" parameterType="com.example.test.domain.Managers" useGeneratedKeys="true">
        insert into managers
        ( ID,Picture,Account
        ,Password,Nickname,Sex
        ,PhoneNum,ManagerStatus,Level
        ,RegisterTime)
        values (#{id,jdbcType=INTEGER},#{picture,jdbcType=VARCHAR},#{account,jdbcType=VARCHAR}
        ,#{password,jdbcType=VARCHAR},#{nickname,jdbcType=VARCHAR},#{sex,jdbcType=VARCHAR}
        ,#{phonenum,jdbcType=VARCHAR},#{managerstatus,jdbcType=INTEGER},#{level,jdbcType=INTEGER}
        ,#{registertime,jdbcType=TIMESTAMP})
    </insert>

    <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.example.test.domain.Managers" useGeneratedKeys="true">
        insert into managers
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">ID,</if>
                <if test="picture != null">Picture,</if>
                <if test="account != null">Account,</if>
                <if test="password != null">Password,</if>
                <if test="nickname != null">Nickname,</if>
                <if test="sex != null">Sex,</if>
                <if test="phonenum != null">PhoneNum,</if>
                <if test="managerstatus != null">ManagerStatus,</if>
                <if test="level != null">Level,</if>
                <if test="registertime != null">RegisterTime,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id,jdbcType=INTEGER},</if>
                <if test="picture != null">#{picture,jdbcType=VARCHAR},</if>
                <if test="account != null">#{account,jdbcType=VARCHAR},</if>
                <if test="password != null">#{password,jdbcType=VARCHAR},</if>
                <if test="nickname != null">#{nickname,jdbcType=VARCHAR},</if>
                <if test="sex != null">#{sex,jdbcType=VARCHAR},</if>
                <if test="phonenum != null">#{phonenum,jdbcType=VARCHAR},</if>
                <if test="managerstatus != null">#{managerstatus,jdbcType=INTEGER},</if>
                <if test="level != null">#{level,jdbcType=INTEGER},</if>
                <if test="registertime != null">#{registertime,jdbcType=TIMESTAMP},</if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.example.test.domain.Managers">
        update managers
        <set>
                <if test="picture != null and picture.trim().length > 0">
                    Picture = #{picture,jdbcType=VARCHAR},
                </if>
                <if test="account != null and account.trim().length > 0">
                    Account = #{account,jdbcType=VARCHAR},
                </if>
                <if test="password != null and password.trim().length > 0">
                    Password = #{password,jdbcType=VARCHAR},
                </if>
                <if test="nickname != null and nickname.trim().length > 0">
                    Nickname = #{nickname,jdbcType=VARCHAR},
                </if>
                <if test="sex != null and sex.trim().length > 0">
                    Sex = #{sex,jdbcType=VARCHAR},
                </if>
                <if test="phonenum != null and phonenum.trim().length > 0">
                    PhoneNum = #{phonenum,jdbcType=VARCHAR},
                </if>
                <if test="managerstatus != null">
                    ManagerStatus = #{managerstatus,jdbcType=INTEGER},
                </if>
                <if test="level != null">
                    Level = #{level,jdbcType=INTEGER},
                </if>
        </set>
        where   ID = #{id,jdbcType=INTEGER} 
    </update>

    <update id="updateByPrimaryKey" parameterType="com.example.test.domain.Managers">
        update managers
        set 
            Picture =  #{picture,jdbcType=VARCHAR},
            Account =  #{account,jdbcType=VARCHAR},
            Password =  #{password,jdbcType=VARCHAR},
            Nickname =  #{nickname,jdbcType=VARCHAR},
            Sex =  #{sex,jdbcType=VARCHAR},
            PhoneNum =  #{phonenum,jdbcType=VARCHAR},
            ManagerStatus =  #{managerstatus,jdbcType=INTEGER},
            Level =  #{level,jdbcType=INTEGER},
            RegisterTime =  #{registertime,jdbcType=TIMESTAMP}
        where   ID = #{id,jdbcType=INTEGER} 
    </update>

</mapper>
